package routes

import (
	"github.com/gin-contrib/cors"
	"github.com/gin-gonic/gin"
	"main.go/handlers"
)

// SetupRouter - TÃ¼m route'larÄ± burada tanÄ±mlÄ±yoruz
func SetupRouter() *gin.Engine {
	r := gin.Default()

	// ğŸ”¥ CORS middleware ekleyelim
	r.Use(cors.Default())

	// ğŸ“Œ **Ticket Ä°ÅŸlemleri**
	ticketRoutes := r.Group("/tickets")
	{
		ticketRoutes.GET("", handlers.GetTickets)          // TÃ¼m ticket'larÄ± getir
		ticketRoutes.GET("/:id", handlers.GetTicketByID)   // Belirli ticket'Ä± getir
		ticketRoutes.POST("", handlers.CreateTicket)       // Yeni ticket oluÅŸtur
		ticketRoutes.PUT("/:id", handlers.UpdateTicket)    // Ticket gÃ¼ncelle
		ticketRoutes.DELETE("/:id", handlers.DeleteTicket) // Ticket sil
	}

	// ğŸ“Œ **Mesaj Ä°ÅŸlemleri (Belirli Ticket Ä°Ã§in)**
	messageRoutes := r.Group("/tickets/:id/messages")
	{
		messageRoutes.GET("", handlers.GetMessages)    // Ticket'a ait mesajlarÄ± getir
		messageRoutes.POST("", handlers.CreateMessage) // Ticket'a yeni mesaj ekle
	}

	// ğŸ“Œ **Dosya YÃ¼kleme (Resim/Dosya)**
	r.POST("/upload", handlers.UploadFile) // Dosya yÃ¼kleme endpoint'i

	// ğŸ“Œ **Bina Ä°ÅŸlemleri**
	buildingRoutes := r.Group("/buildings")
	{
		buildingRoutes.GET("", handlers.GetBuildings)          // TÃ¼m binalarÄ± getir
		buildingRoutes.GET("/:id", handlers.GetBuildingByID)   // Belirli bir binayÄ± getir
		buildingRoutes.POST("", handlers.CreateBuilding)       // Yeni bina ekle
		buildingRoutes.PUT("/:id", handlers.UpdateBuilding)    // BinayÄ± gÃ¼ncelle
		buildingRoutes.DELETE("/:id", handlers.DeleteBuilding) // BinayÄ± sil
	}

	// ğŸ“Œ **MÃ¼ÅŸteri Ä°ÅŸlemleri**
	customerRoutes := r.Group("/customers")
	{
		customerRoutes.GET("", handlers.GetCustomers)          // TÃ¼m mÃ¼ÅŸterileri getir
		customerRoutes.GET("/:id", handlers.GetCustomerByID)   // Belirli bir mÃ¼ÅŸteriyi getir
		customerRoutes.POST("", handlers.CreateCustomer)       // Yeni mÃ¼ÅŸteri ekle
		customerRoutes.PUT("/:id", handlers.UpdateCustomer)    // MÃ¼ÅŸteriyi gÃ¼ncelle
		customerRoutes.DELETE("/:id", handlers.DeleteCustomer) // MÃ¼ÅŸteriyi sil
	}

	workerRoutes := r.Group("/workers")
	{
		workerRoutes.GET("", handlers.GetWorkers)            // TÃ¼m binalarÄ± getir
		workerRoutes.GET("/:id", handlers.GetBuildingByID)   // Belirli bir binayÄ± getir
		workerRoutes.POST("", handlers.CreateWorker)         // Yeni bina ekle
		workerRoutes.PUT("/:id", handlers.UpdateBuilding)    // BinayÄ± gÃ¼ncelle
		workerRoutes.DELETE("/:id", handlers.DeleteBuilding) // BinayÄ± sil
	}

	// ğŸ“Œ **Auth Ä°ÅŸlemleri**
	authRoutes := r.Group("/auth")
	{
		authRoutes.POST("/login", handlers.Login)   // KullanÄ±cÄ± giriÅŸ yapar
		authRoutes.POST("/logout", handlers.Logout) // KullanÄ±cÄ± Ã§Ä±kÄ±ÅŸ yapar
	}

	// ğŸ“Œ **Bildirim Ä°ÅŸlemleri**
	notificationRoutes := r.Group("/notifications")
	{
		notificationRoutes.GET("", handlers.GetNotifications)                // TÃ¼m bildirimleri getir
		notificationRoutes.PUT("/:id/read", handlers.MarkNotificationAsRead) // Bildirimi okundu olarak iÅŸaretle
	}

	// ğŸ“Œ **Dashboard Verileri**
	r.GET("/dashboard", handlers.GetDashboardData) // ğŸ“Š Dashboard verilerini getir

	return r
}
