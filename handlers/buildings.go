package handlers

import (
	"fmt"
	"net/http"
	"strconv"
	"strings"

	"github.com/gin-gonic/gin"
	"gorm.io/gorm"
	"main.go/config"
	"main.go/models"
)

// **Yeni ID'yi oluÅŸturma fonksiyonu**
func generateBuildingID(db *gorm.DB) (string, error) {
	fmt.Println("ğŸ“Œ Yeni bir bina ekleme isteÄŸi alÄ±ndÄ±!") // ğŸ›  Log ekleyelim

	var lastBuilding models.Building

	// **En son eklenen binayÄ± ID'ye gÃ¶re sÄ±rala ve getir**
	if err := db.Order("id DESC").First(&lastBuilding).Error; err != nil {
		// **EÄŸer hiÃ§ bina yoksa, "B-0001" ile baÅŸlat**
		if err == gorm.ErrRecordNotFound {
			return "B-0001", nil
		}
		return "", err
	}

	// **Mevcut en bÃ¼yÃ¼k ID'yi al ("B-xxxx" formatÄ±nda)**
	lastID := lastBuilding.ID

	// **"B-" kÄ±smÄ±nÄ± at ve sayÄ±sal kÄ±smÄ± Ã§Ä±kar**
	lastNumberStr := strings.TrimPrefix(lastID, "B-")
	lastNumber, err := strconv.Atoi(lastNumberStr)
	if err != nil {
		return "", fmt.Errorf("invalid ID format: %v", err)
	}

	// **Bir artÄ±rarak yeni ID'yi oluÅŸtur**
	newID := fmt.Sprintf("B-%04d", lastNumber+1)
	return newID, nil
}

// ğŸ“Œ **Yeni Bina Ekleme**
func CreateBuilding(c *gin.Context) {
	fmt.Println("ğŸ“Œ Yeni bir bina ekleme isteÄŸi alÄ±ndÄ±! 2222") // ğŸ›  Log ekleyelim

	var building models.Building
	if err := c.ShouldBindJSON(&building); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	// ğŸ“Œ **Yeni ID oluÅŸtur**
	newID, err := generateBuildingID(config.DB)
	if err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "Failed to generate building ID"})
		return
	}
	building.ID = newID

	// ğŸ“Œ **VeritabanÄ±na ekle**
	if err := config.DB.Create(&building).Error; err != nil {
		c.JSON(http.StatusInternalServerError, gin.H{"error": "Failed to create building"})
		return
	}

	// ğŸ“Œ **BaÅŸarÄ± yanÄ±tÄ±**
	c.JSON(http.StatusCreated, gin.H{
		"message":  "Building added successfully",
		"building": building,
	})
}

// ğŸ“Œ **TÃ¼m BinalarÄ± Getirme**
func GetBuildings(c *gin.Context) {
	var buildings []models.Building
	config.DB.Find(&buildings)
	c.JSON(http.StatusOK, buildings)
}

// ğŸ“Œ **Belirli Bir BinayÄ± Getirme**
func GetBuildingByID(c *gin.Context) {
	var building models.Building
	id := c.Param("id")

	if err := config.DB.First(&building, id).Error; err != nil {
		c.JSON(http.StatusNotFound, gin.H{"error": "Building not found"})
		return
	}

	c.JSON(http.StatusOK, building)
}

// ğŸ“Œ **Bina GÃ¼ncelleme**
func UpdateBuilding(c *gin.Context) {
	var building models.Building
	id := c.Param("id")

	if err := config.DB.First(&building, id).Error; err != nil {
		c.JSON(http.StatusNotFound, gin.H{"error": "Building not found"})
		return
	}

	if err := c.ShouldBindJSON(&building); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	config.DB.Save(&building)
	c.JSON(http.StatusOK, building)
}

// ğŸ“Œ **Bina Silme**
func DeleteBuilding(c *gin.Context) {
	var building models.Building
	id := c.Param("id")

	if err := config.DB.First(&building, id).Error; err != nil {
		c.JSON(http.StatusNotFound, gin.H{"error": "Building not found"})
		return
	}

	config.DB.Delete(&building)
	c.JSON(http.StatusOK, gin.H{"message": "Building deleted successfully"})
}
